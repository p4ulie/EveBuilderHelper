#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sat Jun 29 14:10:38 2013 from "/home/paulie/workspace/EveBuilderHelper/wx/testMaterialViewer.wxg"

import wx
import wx.grid

from EveItem import *
from EveBlueprint import *
from EveGroup import *
from EveCategory import *

from Config import *

# category = []
# group = []

ME = 30
skillLevelProdEff = 5
currentItemName = ''

# begin wxGlade: extracode
# end wxGlade

class MaterialTable(wx.grid.PyGridTableBase):
    materialList = []

    def GetNumberRows(self):
        """Return the number of rows in the grid"""
        return len(self.materialList)
    
    def GetNumberCols(self):
        """Return the number of columns in the grid"""
        return 2
    
    def IsEmptyCell(self, row, col):
        """Return True if the cell is empty"""
        return False

    def GetTypeName(self, row, col):
        """Return the name of the data type of the value in the cell"""
        return None

    def GetValue(self, row, col):
        """Return the value of a cell"""
        return self.materialList[row][col]

    def SetValue(self, row, col, value):
        """Set the value of a cell"""
        pass
#        self.materialList[row][col] = value

    def AddRow(self, materialName, materialQuantity):
        self.materialList.append([materialName, materialQuantity])
    
    def Clear(self):
        self.materialList = []

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "Blueprint ME", style=wx.ST_NO_AUTORESIZE)
        self.spin_ctrl_ME = wx.SpinCtrl(self, -1, "", min=-4, max=100, style=wx.TE_PROCESS_ENTER)
        self.lbCategory = wx.ListBox(self, -1, choices=[])
        self.lbGroup = wx.ListBox(self, -1, choices=[])
        self.lbItem = wx.ListBox(self, -1, choices=[])
        self.gdMaterialList = wx.grid.Grid(self, -1, size=(1, 1))
        self.sizer_1_staticbox = wx.StaticBox(self, -1, "sizer_1")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_SPINCTRL, self.onChangeME, self.spin_ctrl_ME)
        self.Bind(wx.EVT_LISTBOX, self.onItemSelectedCategory, self.lbCategory)
        self.Bind(wx.EVT_LISTBOX, self.onItemSelectedGroup, self.lbGroup)
        self.Bind(wx.EVT_LISTBOX, self.onItemSelectedType, self.lbItem)
        # end wxGlade

        category = EveInvCategory(DB)
        for cat in category.getCategories():
            self.lbCategory.Append(cat[1])

        self.matTab = MaterialTable()
        self.gdMaterialList.SetTable(self.matTab)
        self.spin_ctrl_ME.SetValue(ME)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Build Material Viewer")
        self.SetSize((600, 400))
        self.gdMaterialList.CreateGrid(2, 2)
        self.gdMaterialList.EnableEditing(0)
        self.gdMaterialList.EnableDragRowSize(0)
        self.gdMaterialList.SetSelectionMode(wx.grid.Grid.wxGridSelectRows)
        self.gdMaterialList.SetColLabelValue(0, "Material")
        self.gdMaterialList.SetColLabelValue(1, "Amount")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        self.sizer_1_staticbox.Lower()
        sizer_1 = wx.StaticBoxSizer(self.sizer_1_staticbox, wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.spin_ctrl_ME, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_3, 0, wx.EXPAND, 0)
        sizer_2.Add(self.lbCategory, 1, wx.EXPAND, 0)
        sizer_2.Add(self.lbGroup, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(self.lbItem, 1, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 1)
        sizer_1.Add(self.gdMaterialList, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def onItemSelectedCategory(self, event):  # wxGlade: MyFrame.<event_handler>
#        currentCategory = event.GetSelection()
        currentCategoryName = self.lbCategory.GetStringSelection()

        category = EveInvCategory(DB)
        category.getCategoryByName(currentCategoryName)

        self.lbGroup.Clear()

#        group = EveGroup(DB)

        for gr in category.getGroupsInCategory():
            self.lbGroup.Append(gr[2])

        event.Skip()

    def onItemSelectedGroup(self, event):  # wxGlade: MyFrame.<event_handler>
#        currentGroup = event.GetSelection()
        currentGroupName = self.lbGroup.GetStringSelection()
        
        group = EveGroup(DB, groupName = currentGroupName)

        self.lbItem.Clear()

        for it in group.getItemsInGroup():
            self.lbItem.Append(it[2])

        event.Skip()

    def refreshGrid(self):
        global ME
        global currentItemName
        if currentItemName:
            item = EveItem(DB, typeName = currentItemName)
    
            blueprint = EveBlueprint(DB, productTypeID = item.typeID, ResearchLevelME = ME)
            materialList = blueprint.getManufacturingMaterials(skillLevelProdEff)
            if materialList:
                self.matTab.Clear()
    
                for materialType, materialAmount in materialList:
                    material = EveItem(DB, typeID = materialType)
    
                    self.matTab.AddRow(material.typeName, materialAmount)

        self.gdMaterialList.SetTable(self.matTab)        
        self.gdMaterialList.Refresh()        
    
    def onItemSelectedType(self, event):  # wxGlade: MyFrame.<event_handler>
        global currentItemName
        currentItemName = self.lbItem.GetStringSelection()
        self.refreshGrid()
        event.Skip()

    def onChangeME(self, event):  # wxGlade: MyFrame.<event_handler>
        global ME
        ME = self.spin_ctrl_ME.Value
        self.refreshGrid()
        event.Skip()

# end of class MyFrame
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
